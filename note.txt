Netty使用场景有很多
1. 作为rpc通信的框架 基于socket
2. 作为长连接的服务器 websocket ,客户端，服务端
   websocket html5的组成部分 可以实现客户端浏览器 与服务器持续的连接
   建立连接好后 通常情况下连接会一直保持 不仅客户端向服务端请求响应 且服务端也可以向
   客户端推送数据 这个在http1.0 1.1是不可能实现的 只能轮询 空轮询
   对于实际的业务来说 很多时候 头信息没意义的 对于长连接来说 他们可以仅仅传递数据本身

3. 作为http应用服务器 比如tomcat jetty这样的 但是不会遵循servlet这样的规范
   有自己的处理方式

4. 支持自定义协议 请求头 内容长度 分隔符等等 netty就会编解码

编写netty服务总结:
  1.定义事件循环组
  2.编写服务启动类，并添加Initializer 在Initializer里面添加handler包含自定义的
    在 handler 里面实现 netty为我们提供的回调方法
  3.绑定端口启动服务

  http 基于无状态的请求响应
  无状态:是指两次请求是没有关联的 服务端不会认为第二次请求是同一个客户端发过来的
  缺点:没法追踪某一个请求是来自哪一个客户端  才有了 cookie session

  请求响应:http的请求的发起方一定是 浏览器 ，服务器给出响应之前一定要建立好连接
  客户端发送请求数据  服务端收到后就做处理完毕后
  就会构造respose对象返回给客户端 若基于http1.0 当返回后 连接就留断掉了
 再次请求会重新建立一个连接

  基于http1.1 的话有了keepAlived 保持持续连接
  客户端向服务端 发送完数据后 服务端会在 一定时间内保持这个连接
  在其时间范围内 再次发送请求 会重用这个连接
  若过了那段时间后 保持的连接就断开了
  再次请求会重新建立一个连接
rmi: remote method invocation 远程方法调用 只针对java 比如ejb
A机器 调用 B那台机器上的方法
字节码的转换传输  ,接收

client：序列化请求 反序列化结果 stub 桩
server：反序列化请求 序列化结果 skeleton 骨架

序列化与反序列化 也叫作 编码与解码

RPC: remote procedure call 远程过调用
很多rpc框架是跨语言的
1.定义一个接口说明文件 描述了对象，对象成员、接口方法等一系列信息
2.通过rpc框架提供的编译器 将接口说明文件编译成具体语言文件
3.在客户端与服务端分别引入rpc编译器所生成的文件 即可像调用本地方法一样去调用远程方法

java.io中核心的一个概念就是stream 一个流要么是输入流 要么是输出流不可能既可以是输入流又是输出流

java.nio中有3个核心概念：selector（选择器）, channel(通道),buffer(缓冲区)
java.nio中 我们是面向块（block）或是面向缓冲区


可以将nio中的channel 理解成io中的stream
buffer本身实现就是一块内存 底层是个数组,数据的读取、写都是通过buffer来实现的.

但是 nio 不但可以作为输入还可以做为输出 两个职责

将数据从channel读到buffer中 buffer就相当于一个桶 源源不断将数据从channel （河流）捞上来
再读取buffer内的数据到我们的程序中

io可以直接从流中读取到程序中

除了数组之外buffer还提供了对于数据的结构化访问方式  且可以追踪到系统的读写过程
java中的7种原生数据类型都有对应的buffer类型 比如IntBuffer CharBuffer ...  并没有 Boolbuffer这种类型


Channel指的是可以向其写入数据或是从中读取数据的对象 它类似于java中的stream

但是要明确一点就是向channel写入或是读取一定要通过buffer来的

所有数据的读写都是通过buffer来进行的，
永远不会出现直接向channel写入数据的情况 或者直接从chanel读取数据的情况

与stream不同的是 channel是双向的 一个流只可能是in或者out ，
channel打开后则可以进行读取 写入 或读写

由于channel是双向的因此 能够好的反映出 底层os 的真是情况

比如 在linux中 底层os的通道是双向的。

NIO中的3个重要状态属性的含义  position limit capacity

limit,capacity都是最后一个元素的下一个元素
position 下一个将被读写的元素
0 <= mark <= position <= limit <= capacity

通过nio读取文件涉及3个步骤

1.从fileInputSteam中获取到FileCHannel对象
2.创建 buffer
3、将数据从channel读取到buffer中

绝对方法与相对方法的含义

1.相对方法 limit值与pos 值会在操作时候会被考虑到
2.绝对方法 完全忽略limit值与pos的值

    java DirectByteBuffer 堆上 address专门引用堆外内存的地址 从而找到数据

     对它进行操作的
----------------------------------------------------


        数据(一定被堆上的对象所引用)

    native  堆外内存 (通过c或c++ malloc方法)


直接内存缓冲的释放 由jvm控制 找到address 然后释放


间接内存缓冲 是 把程序里 堆上的数据

拷贝到 os 的内存里面 在和io设备交流完毕
再拷贝回去

释放由 os 自动释放


内存映射文件 对内存做的任何修改都会体现在磁盘上
同样也是利用堆外内存

selector channel buffer

Reactor模式
传统的socket存在的问题
多个Thread线程管理多个socket
但是
1、系统上能开的线程是有限的
2、线程一旦多了起来 存在上下文切换的,需要更多的成本
3、因为每个线程有一个socket与之对应,那么socket是用来传递数据的,但可能连接建立好后
在一段时间内可能就没有数据产生了,那么socket还保持着，服务端的线程还存活
那么就造成服务端有大量线程存在 但是每个线程可能没事可做.
Reactor模式的角色构成： Reactor模式共有5个角色

1.handle(句柄或者描述符):本质代表一种资源,是由操作系统提供的 该资源表示一个个事件 比如说文件描述符 针对网络编程中Socket
描述符 。事件既可以来自外部 也可来自内部 。外部事件比如说客户端的连接请求 客户端发送过来数据等，内部
事件比如说os产生的定时器时间等 他本质上就是一个文件描述符。可以说handle本身是事件本身的发源地.
Synchronous Event Demultiplexer(同步事件分离器) 它本身是一个系统调用 用于等待时间的发生（事件可能是一个 也可能是多个） 调用方在调用它的时候会被阻塞 一直阻塞到同步事件分离器上有事件产生为止.这个时候才会返回,对于linux来说 同步事件分离器指的就是常用的I/O多路复用的机制比如select poll epoll等
在java nio领域中 它对应的组件就是selector 对应的阻塞方法就是select方法

3.Event Handler(事件处理器):本身由多个回调方法构成 这些回调方法构成了与应用相关的对于某个事件的反馈机制。
netty相比较nio来说 在事件处理器这个角色上就行了一个升级 它为我们开发者提供了大量的回调方法来进行业务员逻辑的处理
4、Concrete Event Handler(具体事件处理器):它是事件处理器的实现,它本身实现了事件处理器所提供的各个回调方法
从而实现了特定于业务的逻辑 它本质就是我们所编写的一个处理器实现 MyserverHandler ,它继承了SimpleChannelHandler
5.Initiation Dispatcher(初始分发器) : 它就是reactor角色 它本身定义了一些规范用来控制事件的调度方式 同时又提供了
应用进行事件处理器的注册 删除等设施 .它本身是事件处理器的核心所在 ，会通过同步事件分离器来等待事件的发生
一旦事件发生,它就会先分离出每一个事件 然后调用事件处理器 最后调用相关的回调方法来处理这些事件
注:调度方式是使用同步事件分离器的selectionKey集合 去遍历

-------------------
Reactor模式的流程
1.当应用向initiation Dispatcher注册具体的事件处理器时，应用会标识出该事件处理器 希望initiation dispatcher在某个事件发生时向其通知的该事件 该事件 与handle关联
2.Initiation dispatcher会要求每个事件处理器向其传递内部的handle 该handle向os标识了事件处理器
3. 当所有的事件处理器注册完毕后 应用会调用handle_event方法来启动initiation dispatcher的事件循环 这时 initiation dispatcher会将每个注册的事件
处理器的handle合并起来 并使用同步事件分离器 等待这些事件的发生 比如说tcp协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的socket handle上
4.当与某个事件源对应的handle变为ready状态时 比如tcp socket变为等待读状态  同步事件分离器就会通知initiation dispatcher
5.initiation dispatcher会触发 事件处理器的回调方法 从而响应这个处于ready状态的handle 当事件发生时 initiation dispatcher
会将被事件源激活的handle作为key来寻找并分发恰当的事件处理器回调方法。
6.initiation dispatcher会回调事件处理器的handle events回调方法来执行特定于应用的功能.(开发者自己编写的功能) 从而响应这个事件 所发生的事件类型
可以作为该方法参数 并被方法内部使用来执行额外的特定于服务的分离与分发。
李狗的图 ： mainReactor就是负责接收请求的  subReactor才是负责处理的 它本质就是workGroup 即IO线程组
mainReactor(boss) acceptor(本质handler，会在调用bind的时候加入到pipeline的最后一个位置,当前面的handler处理完后,当它收到客户端发过来的请求的时候
，它就在自己的channelRead中 将客户端的channnel绑定到workgroup中 即subReactor中) subReactor

注
1.一个EventLoopGroup当中包含一个或者多个EventLoop
2.一个EventLoop在它的整个生命周期中都只会与唯一一个Thread进行绑定
3.所有有EventLoop所处理的各种IO事件都将在它所关联都那个Thread上进行处理
4.一个Channel在它都整个生命收起中只会注册在一个EventLoop上
5.一个EventLoop在运行过程中 会被分配给一个或者多个Channel.
在第5条 注意 io处理一定不能过于繁重 一般在channelHandler内部可以使用线程池的方式,一般不会立刻返回,
使得当前的io线程去处理其它的io事件

当你去执行channel上的io操作的时候 netty会判断执行这个操作的这个线程和这个channel所注册的EventLoop里面封装的线程是不是同一个
如果是 就直接执行 如果不是 netty会以一个任务的形式 将这个任务提交给EventLoop让它去执行, 最终执行这个任务的还是那个EventLoop里
封装的线程对象.

重要结论：
在netty中 Channel的实现一定是线程安全的
基于此 我们可以存储一个channel的引用
并且在需要向远程端点发送数据时 通过这个引用来调用channel相应方法
即便 当时有很多线程都在使用它 也不会多线程问题 而且消息一定按照顺序发送出去

我们在业务开发中 不要将长时间执行的耗时任务放到EventLoop的执行队列中 因为它将会一直阻塞该线程所对应的所有channel上的其它执行任务
如果我们需要进行阻塞调用或者耗时操作 那么我们需要一个专门的EventExecutor(业务线程池)。

通常有两种实现方式
1.在channelHandler的回调方法中 使用自己定义的业务线程池 这样可以实现异步调用
2.借助于Netty提供的向channelPipeline添加ChannelHandler时调用addLast方法传递EventExecutor
默认情况下 调用addLast(handler) ChannelHandler中的回调方法
都是由IO线程所执行 如果调用了channelPipeline的
ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler);
方法 那么channelhandler中的回调方法就是由参数中的group线程组来执行。


jdk所提供的Future只能通过手工方式来去检查执行结果 而这个操作是会阻塞的 netty则对channleFuture进行了增强
通过ChannelFutureListener以回调方式获取执行结果 去除了手工检查阻塞的操作:
值得注意的是 ChannelFutureListener的operationComplete方法是由IO线程执行的 因此要注意的是不要在这里执行耗时操作
 否则需要通过另外的线程或者线程池来执行


 ==========
 在netty中有两种发送消息的方式,可以直接写到channel中 也可以写到与channelHandler所关联的
 ChannelHandlerContext中 对于前一种方式来说 消息会从ChannelPipeline的末尾开始流动
 对于后一种方式来说 消息将从channelPipeline中的下一个channelHandler开始流动

 结论
 1. ChannelHandlerContext与 ChannelHandler之间的关联绑定关系是永远不会发送改变的 因此对其进行缓存是没有任何问题的
 2.对于与 Channel的同名方法来说  ChannelHandlerContext的方法将会产生更短的事件流 所以我们应该在可能的情况下利用这个特性
 来提升性能

 ==================
 使用NIO进行文件读取所涉及的步骤

 1.从fileinputsream 对象获取到channel对象
 2.创建bufferr
 3.将数据 从channel中读物到buffer对象中

0<=mark<=position<=limit<=capacity
postion表示正在读写的位置
limit 表示读的最大位置
mark 表示做在某个位置标记 方便在读写之后调用reset方法 能重回到标记的位置

flip方法 读写的操作切换之前  都要调用

1.将limit值设为当前的position
2.将position设置成0

clear方法
1.表示清空 将limit值设为capacity
2.将position设置为0

compact 方法

1.将所有未读取的数据复制到buffer起始处
2.将position设为最后一个未读元素后面
3.将limit设为capaciy
4.现在buffer就准备好了 但不会覆盖未读的数据

注意 通过索引来访问byte时并不会改变真是的读索引和写索引
我们可以通过 ByteBuf的reader()与
writerIndex方法分别
直接修改读索引和写索引

Netty ByteBuf所提供的3中缓冲区类型:
1. heap Buffer
2. direct Buffer
3. composite buffer 复合缓冲区 可以容纳 1或者2
这种是java没有提供的

Heap Buffer(堆缓冲区)
这是最常用的类型 ByteBuffer将数据存储懂啊jvm的堆空间中 并且将实际的数据存放到
byte array中实现
优点 由于数据是存储在jvm的堆中 因此可以快速创建与释放 并且它提供了直接访问内部字节数组的方法
缺点 每次读写 都需要先将 数据复制到直接缓存区中在进行网络传输

Direct Buffer 直接缓冲区

在堆外 直接分配内存空间 直接缓冲区不会占用堆的容量空间。
因为它是由操作系统在本地内存进行发数据分配

优点 在使用socket传递数据时 性能很好 因为数据直接位于os的本地内存中
所以不需要从jvm将数据复制到直接缓存区中
缺点 因为DirectBuffer 是直接在内存中的 所以内存空间的分配和释放 比堆空间更加复杂
而且速度要慢一些

Netty通过提供内存池来解决这个问题.直接缓冲区并不支持 通过字节数组的方式访问数据

重点 对于后端的业务消息的编解码来说 推荐使用　HeapByteBuf 对于IO通信线程
在读写缓冲区时候 推荐使用Direct Buffer

Composite BUffer 复合缓冲区

jdk的ByteBuffer和Netty的Bytebuf之间的差异
 1.Netty的ByteBuf采用了读写索引分离的策略 (readerIndex与writerIndex) 一个初始化的ByteBuf
 的readerIndex与writeIdex值都为0
 2.当读索引与写索引 处于同一个位置时 如果我们继续读取 就会抛出IndexOutBoundException
 3.对于ByteBuf的任何读写操作都会分别单独维护读索引和写索引.maxCapacity最大容量限制就是int整型的最大值

 jdk的ByteBuffer的缺点
 1。final byte[] hb: 这是jdk的ByteBuffer对象中用于存储数据的对象声明
 可以看到 字节数组的声明是final
 长度固定不变的
 一旦分配好就不能动态扩容与收缩 而且当等待存储的数据字节很大时
 就很可能出现IndexOutOfBoundException 如果要预防
这个异常 需要在存储之前完全确定好字节大小

如果ByteBuffer的空间不足 只有一种解决方案
创建一个全新的ByteBuffer对象  然后将之前的
ByteBuffer中的数据复制过去
这一切都要手动完成

2.ByteBuffer只使用一个position指针来标识位置信息
在进行读写切换时 需要调用flip方法或者rewind方法
读写起来不是很方便

Netty的ByteBuf的优点：
1.存储字节的数组是动态的 其最大默认是Integer.MAX_VALUE
这里的动态性体现在write方法中的

write方法在执行时 会判断buffer容量
不足 自动扩容
2.ByteBuf的读写索引是完全分开的
使用起来方便

自旋锁 占用cpu 一直 更新


AtomicIntegerFieldUpdater要点总结

1 更新期更新的必须是int类型 不能是其它包装类型
2 更新器更新的必须是volatile类型变量
3 变量不能是static的必须是实例变量 因为Unsafe.objectFieldOffset()方法不支持静态变量(cas操作本质上是通过对象实例的偏移量来直接进行赋值)
4 更新器只能修改它可见的范围内的变量 因为更新器是通过反射来得到这个变量 如果这个变量不可见会报错
如果要更新的变量是包装类型 可以使用AtomicReferenceFieldUpdater

Netty处理器重要概念
1.Netty的处理器可以分为两类 入站和出战处理器
2.入站处理器的顶层是ChannelInboundHandler 出战处理器的顶层ChannelOutboundHandler
3.数据处理时常用的各种编码本质上都是处理器
4.编码器: 数据在网络中传递 都是以字节流的方式传递 ，将数据由原本的形式转为字节流的操作称为 编码
  将数据由字节转换为它原本或者其它格式的操作称为 解码
  编解码 统一称为codec
5.编码 本质上是一种出站处理器ChannelOutboundHandler
6.解码 是一种入站处理器ChannelInboundHandler
7.Netty 编码通常以XXXCoder的命名 解码器以XXXDecoder命名
